<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Object对象</title>
    <url>/2021/11/15/hello-world/</url>
    <content><![CDATA[<h2 id="0bject实例函数与静态函数"><a href="#0bject实例函数与静态函数" class="headerlink" title="0bject实例函数与静态函数"></a>0bject实例函数与静态函数</h2><h3 id="Object实例函数"><a href="#Object实例函数" class="headerlink" title="Object实例函数"></a>Object实例函数</h3><ul>
<li><p>实例对象.hasOwnPropety(属性名)</p>
<ul>
<li><p>用于判断对象自身是否具有指定名称的实例属性【不会检查实例对象的原型链】</p>
<ul>
<li>true:表示查到相应的属性</li>
<li>false:表示没有查到属性</li>
</ul>
</li>
</ul>
</li>
<li><p>实例对象.propertylsEnumerable(属性名)</p>
<ul>
<li><p>用于判断指定名称的属性是否为实例属性且是否是可枚举的属性</p>
<ul>
<li>true:表示该属性为实例属性可枚举</li>
<li>false:表示该属性不是实例属性/不可枚举</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Object静态函数"><a href="#Object静态函数" class="headerlink" title="Object静态函数"></a>Object静态函数</h3><ul>
<li><p>Object.create(原型可为空,属性描述)函数【创建对象,无中生有】</p>
<ul>
<li><p>创建并返回一个指定原型和指定属性的对象</p>
</li>
<li><p>参考说明</p>
<ul>
<li><p>参数1：对象的原型,可以为空,原型是undefine</p>
</li>
<li><p>参数2：属性描述符</p>
<ul>
<li><p>value:属性值</p>
</li>
<li><p>writable属性是否可写入</p>
<ul>
<li>true:可改</li>
<li>false:只读,默认</li>
</ul>
</li>
<li><p>enumerable:属性是否可枚举【循环是否可单独获取】</p>
<ul>
<li>true:可</li>
<li>falese:不可,默认</li>
</ul>
</li>
<li><p>configurable:属性是否可配置</p>
<ul>
<li>true:可以修改属性的特性以及删除属性</li>
<li>false:不可配置【默认】</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Object.defineProperties(对象变量,属性描述)函数</p>
<ul>
<li><p>作用是添加或修改对象的属性值</p>
</li>
<li><p>参考说明</p>
<ul>
<li><p>参数1：对象变量</p>
</li>
<li><p>参数2：属性描述符</p>
<ul>
<li><p>value:属性值</p>
</li>
<li><p>writable属性是否可写入</p>
<ul>
<li>true:可改</li>
<li>false:只读,默认</li>
</ul>
</li>
<li><p>enumerable:属性是否可枚举【循环是否可单独获取】</p>
<ul>
<li>true:可</li>
<li>falese:不可,默认</li>
</ul>
</li>
<li><p>configurable:属性是否可配置</p>
<ul>
<li>true:可以修改属性的特性以及删除属性</li>
<li>false:不可配置【默认】</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Object.getOwnPropertyName(实例对象)</p>
<ul>
<li>用于获取对象的所有实例属性和函数,不包含原型链的继承属性和方法,格式为数组</li>
</ul>
</li>
<li><p>Obejct.keys()函数</p>
<ul>
<li>用于获取对象可枚举的实例属性,不包含原型链的继承属性,格式为数组</li>
</ul>
</li>
</ul>
<h2 id="Array常见处理场景"><a href="#Array常见处理场景" class="headerlink" title="Array常见处理场景"></a>Array常见处理场景</h2><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h3><ul>
<li><p>过滤满足条件的数据,返回一个新数组且不会改变原数组的结构</p>
<ul>
<li>true:当前元素符合条件,元素会被添加到新数之内</li>
<li>false:当前元素不符合条件,保留在原来的数组内</li>
</ul>
</li>
<li><p>判断变量是数组还是对象</p>
<ul>
<li><p>construtor–构造属性</p>
<ul>
<li>判断变量的构造函数的类型是数组还是对象</li>
</ul>
</li>
<li><p>instanceo运算符</p>
<ul>
<li><p>用于通过查找原型链来检测某个变量是否为某种数据类型的实例对象</p>
<ul>
<li>作用一：【数组/对象/字符串/数字/布尔值/空值/未定义/某个实例是属于某个某个函数】</li>
<li>作用二：判断实例对象是否属于某个构造函数的实例【实例对象的归属】</li>
</ul>
</li>
<li><p>语法格式：变量instanceof类型</p>
<ul>
<li>true:表示当前变量是某种类型</li>
<li>false:表示当前变量不是该类型</li>
</ul>
</li>
</ul>
</li>
<li><p>toString()函数</p>
<ul>
<li><p>是Object类型本身自带的函数,可以判断变量是数组还是对象–借助call()函数</p>
<ul>
<li><p>借助call()调用Object原型上的toString函数,将主体设置为需要传入的变量,通过返回值判断类型</p>
<ul>
<li>call()</li>
<li>apply()</li>
</ul>
</li>
</ul>
</li>
<li><p>语法格式：Object.prototype.toString.call(变量)</p>
<ul>
<li>返回值：[object类型]</li>
</ul>
</li>
</ul>
</li>
<li><p>Array(变量)静态函数</p>
<ul>
<li><p>判断变量是否是数组</p>
<ul>
<li>true:是数组</li>
<li>false:不是数组</li>
</ul>
</li>
</ul>
</li>
<li><p>reduce()函数累加器</p>
<ul>
<li><p>作用就是累加处理数据【将一个函数作为累加器,将数组中每个元素从左到右一次执行累加】</p>
</li>
<li><p>语法结构：数组 reduce(callback(){}[,intialValue])</p>
<ul>
<li><p>initalValue参数</p>
<ul>
<li>作为callback函数的第一个参数值</li>
</ul>
</li>
<li><p>callback(参数集){}</p>
<ul>
<li><p>accumlator【参数名可改】</p>
</li>
<li><p>currentValue参数</p>
<ul>
<li><p>上一个调用累加器的返回值</p>
<ul>
<li><p>第一类初始值 = initalValue</p>
</li>
<li><p>第二类初始值：=数组的第一个元素</p>
<p>arr.reduce(funtion(acc){acc=arr[0]})</p>
</li>
</ul>
</li>
<li><p>当数组正在循环的元素值类似于循环内arr[i]</p>
</li>
</ul>
</li>
<li><p>currentIndex参数</p>
<ul>
<li><p>当前数组正在循环的元素下标</p>
<ul>
<li>如果initalValue设置了,，下标参数从0开始</li>
<li>如果没有设置,下标从1开始【数组的第一个元素会赋值给acc】</li>
</ul>
</li>
</ul>
</li>
<li><p>array参数</p>
<ul>
<li>数组本身</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>求数组的最大值和最小值</p>
<ul>
<li><p>方法1：通过原型属性拓展性min()和max函数</p>
<ul>
<li>通过在原型上自定义min()和max()【原生的方式】</li>
</ul>
</li>
<li><p>方法2：通过ES6拓展符使用Math对象的min和max</p>
</li>
<li><p>方法3：通过apply()函数借助Math对象的min和max使用</p>
<ul>
<li><p>Array对象和Math对象是分别两个独立原型</p>
<ul>
<li><p>调用对象apply(对象的上下文,[参数])</p>
<p>需要在数组中arr调用数学对象Math.min /Math.max<br>Math.min.apply(arr);将数学方法应用到数组中</p>
</li>
</ul>
</li>
<li><p>apply()：将一个构造函数的方法在另一个构造函数中使用,达到调用this的指向</p>
</li>
</ul>
</li>
<li><p>方法4：借助累加器reduce</p>
<ul>
<li>在原型中自定义min()和max(),借助累加器去对比数组元素的结果</li>
</ul>
</li>
<li><p>方法5：借助sort()函数</p>
<ul>
<li>先从大到小/小到大排序,提取第一个和最后一个</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>遍历的7种方式以及兼容性</p>
<ul>
<li><p>最原始for循环</p>
<ul>
<li>没有兼容性问题</li>
</ul>
</li>
<li><p>基于forEach()循环</p>
<ul>
<li><p>在数组实例中用于遍历调用次数最多的函数,接受一个回调函数</p>
<p>数组.forEach(funtion(当前元素,当前元素下标,数组本身){})</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>  - 当前执行的元素
  - 当前元素的下标
  - 数组本身

- forEach()在ES5新增,低版本的浏览器使用的是较低版本的JS,产生兼容性问题

  - 在Array原型链上添加一个forEach的方法内部for循环来解决forEach的兼容性遍历的问题
</code></pre>
<ul>
<li><p>基于map()循环</p>
<ul>
<li><p>在数组实例中用于遍历调用次数最多的函数,接受一个回调函数</p>
<ul>
<li>当前执行的元素</li>
<li>当前元素的下标</li>
<li>数组本身</li>
</ul>
</li>
<li><p>兼容性问题:通过call()得到返回值将返回值push到新数组当中</p>
</li>
</ul>
</li>
<li><p>filter()遍历</p>
<ul>
<li>通过判断返回值的布尔型来决定是否将返回值push()到新数组当中</li>
</ul>
</li>
<li><p>基于find()遍历</p>
<ul>
<li><p>在数组实例中用于遍历调用次数最多的函数,接受一个回调函数</p>
<ul>
<li>当前执行的元素</li>
<li>当前元素的下标</li>
<li>数组本身</li>
</ul>
</li>
</ul>
</li>
<li><p>基于some()和every()函数的遍历</p>
</li>
<li><p>基于reduce()遍历</p>
</li>
<li><p>数组去重的7种算法</p>
<ul>
<li><p>遍历数组,indexOf查找重复</p>
</li>
<li><p>利用对象的键值对判断</p>
</li>
<li><p>排序后去重</p>
<ul>
<li>先排序,比较相邻元素是否相等</li>
</ul>
</li>
<li><p>多重遍历数组</p>
<ul>
<li>嵌套两层循环,将相邻的元素比较如果相等,下一个元素继续比较</li>
</ul>
</li>
<li><p>reduce去重</p>
</li>
<li><p>ES6的Set数据结构</p>
<ul>
<li>Array.from(new.Set(数组))</li>
</ul>
</li>
<li><p>利用map遍历去重</p>
</li>
</ul>
</li>
<li><p>查找数组中出现次数最多的元素</p>
<ul>
<li>键值对遍历</li>
<li>reduce()函数</li>
</ul>
</li>
</ul>
<p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>
]]></content>
  </entry>
</search>
